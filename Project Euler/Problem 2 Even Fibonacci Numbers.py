#LINK PROBLEM: https://www.freecodecamp.org/learn/coding-interview-prep/project-euler/problem-2-even-fibonacci-numbers

"""Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.
"""

import numpy as np

def fiboEvenSum(n):
    np.seterr(all='ignore')

    sequencia = np.arange(1, n+1, dtype=int)

    raiz_5 = np.sqrt(5)

    alpha = (1+raiz_5)/2
    beta = (1-raiz_5)/2

    sequencia = np.rint(((alpha ** sequencia) - (beta ** sequencia)) / raiz_5)

    sequencia = sequencia[(sequencia <= n) & (sequencia % 2 == 0)].sum(dtype=int)

    return sequencia


if __name__ == '__main__':
    #fiboEvenSum(10) should return a number.
    fiboEvenSum(8)

    #Your function should return an even value.
    fiboEvenSum(10)

    #Your function should sum the even-valued Fibonacci numbers: fiboEvenSum(8) should return 10.
    fiboEvenSum(8)

    #fiboEvenSum(10) should return 10.
    print(fiboEvenSum(10))

    #fiboEvenSum(34) should return 44.
    print(fiboEvenSum(34))

    #fiboEvenSum(60) should return 44.
    print(fiboEvenSum(60))

    #fiboEvenSum(1000) should return 798.
    print(fiboEvenSum(1000))

    #fiboEvenSum(100000) should return 60696.
    print(fiboEvenSum(100000))

    #fiboEvenSum(4000000) should return 4613732.
    print(fiboEvenSum(4000000))